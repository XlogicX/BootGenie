--- boot-man.asm
+++ boot-man_level.hak
@@ -104,7 +104,7 @@
 buildmaze:
     mov di, 0x0788                  ; Lower left corner of maze in video ram
     mov si, maze                    ; The first byte of the bit array containing the maze
-    mov dx, 0x05fa                  ; Address in video ram of the lower left powerpill
+    mov dx, 0x05bc                  ; Address in video ram of the lower left powerpill
 .maze_outerloop:
     mov cx, 0x003c                  ; The distance between a character in the maze and its 
                                     ; symmetric counterpart. Also functions as loop counter
@@ -113,7 +113,7 @@
 .maze_innerloop:
     shl ax, 1                       ; shift out a single bit to determine whether a wall or dot must be shown
     push ax
-    mov ax, 0x01db                  ; Assume it is a wall character (0x01: blue; 0xdb: full solid block)
+    mov ax, 0x07db                  ; Assume it is a wall character (0x07: grey; 0xdb: full solid block)
     jc .draw                        ; Draw the character if a 1 was shifted out
     mov ax, 0x0ff9                  ; otherwise, assume a food character (0x0f: white; x0f9: bullet)
     cmp di, dx                      ; See if instead of food we need to draw a power pill
@@ -489,7 +489,7 @@
     iret
 
 bootman_data:
-    db 0x0f, 0x0f               ; Boot-Man's x and y position
+    db 0x0f, 0x0e               ; Boot-Man's x and y position
     db 0xca                     ; Boot-Man's direction
     db 0xca                     ; Boot-Man's future direction
 
@@ -499,22 +499,22 @@
 ghostdata:
     db 0xc2                     ; 1st ghost, direction
 ghostpos:
-    db 0x01, 0x01               ;            x and y position
+    db 0x01, 0x06               ;            x and y position
 ghostterrain:
     dw 0x0ff9                   ;            terrain underneath
 ghostfocus:
     db 0x0, 0x0                 ;            focus point for movement
 secondghost:
     db 0xce                     ; 2nd ghost, direction
-    db 0x01, 0x17               ;            x and y position
+    db 0x01, 0x10               ;            x and y position
     dw 0x0ff9                   ;            terrain underneath
     db 0x0, 0x4                 ;            focus point for movement
     db 0xca                     ; 3rd ghost, direction
-    db 0x1e, 0x01               ;            x and y position
+    db 0x1e, 0x06               ;            x and y position
     dw 0x0ff9                   ;            terrain underneath
     db 0xfc, 0x0                ;            focus point for movement
     db 0xce                     ; 4th ghost, direction
-    db 0x1e, 0x17               ;            x and y position
+    db 0x1e, 0x10               ;            x and y position
     dw 0x0ff9                   ;            terrain underneath
     db 0x4, 0x0                 ;            focus point for movement
 lastghost:
@@ -529,9 +529,9 @@
 
 ; The maze, as a bit array. Ones denote walls, zeroes denote food dots / corridors
 ; The maze is stored upside down to save one cmp instruction in buildmaze
-maze: dw 0xffff, 0x8000, 0xbffd, 0x8081, 0xfabf, 0x8200, 0xbefd, 0x8001
-      dw 0xfebf, 0x0080, 0xfebf, 0x803f, 0xaebf, 0xaebf, 0x80bf, 0xfebf
-      dw 0x0080, 0xfefd, 0x8081, 0xbebf, 0x8000, 0xbefd, 0xbefd, 0x8001
+maze: dw 0xffff,0xffff,0xffff,0xfc7f,0xfd7f,0xfd7f,0xfc00,0xff7d
+      dw 0x0141,0xfd5f,0xfc40,0xfd77,0x0107,0xff77,0xfc40,0xfddd,
+      dw 0xfc11,0xfef7,0x0010,0xffdd,0xffd1,0xffd7,0xffc0,0xffff
       dw 0xffff
 maze_length: equ $ - maze
 
